{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AgentArena ML Agent Training on Google Colab\n",
    "\n",
    "This notebook sets up and runs the AgentArena reinforcement learning training pipeline in a Google Colab environment. The training process uses a 2D shooting game environment as a testbed for training RL agents using Deep Q-Learning (DQN)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Clone the Repository and Install Dependencies\n",
    "\n",
    "First, we'll clone the repository and install the required dependencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check if we're running in Colab\n",
    "import sys\n",
    "IN_COLAB = 'google.colab' in sys.modules\n",
    "print(f\"Running in Google Colab: {IN_COLAB}\")\n",
    "\n",
    "if not IN_COLAB:\n",
    "    print(\"This notebook is designed to run in Google Colab\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clone the repository\n",
    "!git clone https://github.com/your-username/AgentArena.git\n",
    "# Note: Replace with your actual repository URL. You'll need to upload your code to GitHub first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change to the repository directory\n",
    "%cd AgentArena"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install dependencies\n",
    "!pip install -e ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Set up a Virtual Display for Pygame\n",
    "\n",
    "Since we're running in a headless environment but might need to render the game (especially for debugging), we'll set up a virtual display using the `xvfb` package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install xvfb\n",
    "!apt-get update\n",
    "!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1\n",
    "!pip install gym pyvirtualdisplay > /dev/null 2>&1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up virtual display\n",
    "from pyvirtualdisplay import Display\n",
    "display = Display(visible=0, size=(1200, 900))\n",
    "display.start()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Create Directories for Models and Results\n",
    "\n",
    "Ensure that the necessary directories for saving models and results exist."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p models results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Run Training\n",
    "\n",
    "Now we can start the training process. You can customize the parameters below as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define training parameters\n",
    "MODEL_NAME = \"colab_model\"\n",
    "EPISODES = 5000\n",
    "REWARD_TYPE = \"enhanced\"  # Options: basic, aggressive, defensive, advanced, enhanced\n",
    "LEARNING_RATE = 0.005\n",
    "GAMMA = 0.99\n",
    "EPSILON = 0.8\n",
    "EPSILON_DECAY = 0.9995\n",
    "EPSILON_MIN = 0.25\n",
    "SAVE_FREQ = 300\n",
    "RENDER = False  # Set to True if you want to render (might cause performance issues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run training\n",
    "!python -m agentarena.training.train \\\n",
    "  --episodes {EPISODES} \\\n",
    "  --model-name {MODEL_NAME} \\\n",
    "  --save-freq {SAVE_FREQ} \\\n",
    "  --reward-type {REWARD_TYPE} \\\n",
    "  --learning-rate {LEARNING_RATE} \\\n",
    "  --gamma {GAMMA} \\\n",
    "  --epsilon {EPSILON} \\\n",
    "  --epsilon-decay {EPSILON_DECAY} \\\n",
    "  --epsilon-min {EPSILON_MIN} \\\n",
    "  {'--render' if RENDER else ''}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Visualize Training Results\n",
    "\n",
    "Once training is complete, we can visualize the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "import os\n",
    "\n",
    "# Find the most recent results file\n",
    "results_files = glob.glob(f\"results/{MODEL_NAME}_*.pkl\")\n",
    "if results_files:\n",
    "    latest_results = max(results_files, key=os.path.getctime)\n",
    "    print(f\"Found results file: {latest_results}\")\n",
    "    \n",
    "    # Visualize the results\n",
    "    !python -m agentarena.training.visualize_training --files {latest_results}\n",
    "else:\n",
    "    print(\"No results files found\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Inspect and Test the Trained Model\n",
    "\n",
    "Find the best model from training and run a few test episodes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the best model\n",
    "model_files = glob.glob(f\"models/{MODEL_NAME}_*_best.pt\")\n",
    "if model_files:\n",
    "    best_model = max(model_files, key=os.path.getctime)\n",
    "    print(f\"Found best model: {best_model}\")\n",
    "    \n",
    "    # Run a few evaluation episodes\n",
    "    !python -m agentarena.training.train \\\n",
    "      --mode evaluate \\\n",
    "      --model-path {best_model} \\\n",
    "      --episodes 10 \\\n",
    "      --render\n",
    "else:\n",
    "    print(\"No model files found\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Access TensorBoard (Optional)\n",
    "\n",
    "If you want to view TensorBoard logs during or after training:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load TensorBoard extension\n",
    "%load_ext tensorboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Launch TensorBoard\n",
    "%tensorboard --logdir runs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Download Trained Models and Results\n",
    "\n",
    "Finally, you can download your trained models and results to your local machine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if IN_COLAB:\n",
    "    from google.colab import files\n",
    "    \n",
    "    # Zip the models and results directories\n",
    "    !zip -r AgentArena_trained.zip models/ results/ runs/\n",
    "    \n",
    "    # Download the zip file\n",
    "    files.download('AgentArena_trained.zip')\n",
    "    print(\"Download initiated. Check your browser downloads.\")\n",
    "else:\n",
    "    print(\"Not running in Colab. No need to download.\")"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "AgentArena_Training.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
